"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pegasus = function () {
	function Pegasus(_ref) {
		var defaultHash = _ref.defaultHash,
		    config = _ref.config,
		    $container = _ref.$container;

		_classCallCheck(this, Pegasus);

		this.defaultHash = defaultHash;
		if (config.multihash == undefined) throw new Error("set the prop <multihash> in the object of configuration");
		if (config.router == undefined) throw new Error("set the prop <router> in the object of conifguration");
		if (config.router && config.template404 == undefined) throw new Error("set the 404 template, is needed when use the router mode ...");
		if (config.template404 != null && !this.isHTMLElement(config.template404)) throw new Error('config object need a template404 HTMLElement.');
		this.config = {
			router: config.router,
			multihash: config.multihash
		};
		if (this.isHTMLElement($container)) $container.style['display'] = 'block';
		if (this.config.router) this.$element_error404 = config.template404;
		this.dataBinding();
	}

	_createClass(Pegasus, [{
		key: "verifyDefaultHash",
		value: function verifyDefaultHash() {
			var _this = this;

			return new Promise(function (resolve, reject) {
				if (window.location.hash == '') {
					_this.fly(_this.defaultHash);
					resolve(false);
				} else {
					resolve(true);
				}
			});
		}
	}, {
		key: "saddle",
		value: function saddle() {
			var _this2 = this;

			var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

			elements.map(function (element) {
				element.hash = element.hash.split('#').join('');
			});
			this.elements = elements;
			if (this.config.router) this.verifyDefaultHash().then(function (hasHash) {
				_this2.changeUrl();
			});else this.changeUrl();
			window.onpopstate = function () {
				return _this2.changeUrl();
			};
		}
	}, {
		key: "changeUrl",
		value: function changeUrl() {
			var _this3 = this;

			var currentHash = undefined;
			var multihash = false;
			if (window.location.hash == null) currentHash = undefined;else {

				currentHash = window.location.hash;
				currentHash = currentHash.split('#').join('');
				if (this.config.multihash) {
					if (currentHash.split('&').length > 1) {
						multihash = true;
					}
				}
			}
			if (multihash) {
				var hashs = currentHash.split('#').join('');
				hashs = hashs.split('&');
				hashs.map(function (hash) {
					_this3.dieOrlive({ currentHash: "" + hash, multihash: true, hashs: hashs });
				});
			} else {
				this.dieOrlive({ currentHash: currentHash, multihash: multihash, hashs: null });
			}
		}
	}, {
		key: "dieOrlive",
		value: function dieOrlive(_ref2) {
			var currentHash = _ref2.currentHash,
			    multihash = _ref2.multihash,
			    hashs = _ref2.hashs;

			var page = undefined;
			if (!multihash) {
				page = this.elements.find(function (element) {
					return element.hash === currentHash;
				});
			} else {
				page = this.elements.find(function (element) {
					return element.hash === currentHash;
				});
			}
			if (page == undefined && this.config.router) {
				this.elements.map(function (element) {
					return element.$element.style['display'] = 'none';
				});
				this.error404();
				throw "ERROR 404";
			} else {
				if (this.config.router) this.$element_error404.style['display'] = 'none';
				this.elements.map(function (element, index) {
					if (currentHash !== undefined) {
						if (element.hash == currentHash) {
							element.$element.style['display'] = 'block';
							if (element.callback == null) {
								element.callback = function () {};
							}
							element.callback();
						} else {
							if (hashs !== null) {
								var hashelement = hashs.find(function (hash) {
									return element.hash === "" + hash;
								});
								if (!hashelement) {
									element.$element.style['display'] = 'none';
								}
							} else {
								element.$element.style['display'] = 'none';
							}
						}
					} else {
						element.$element.style['display'] = 'none';
					}
				});
			}
		}
	}, {
		key: "error404",
		value: function error404() {
			this.$element_error404.style['display'] = 'block';
		}
	}, {
		key: "fly",
		value: function fly(hash) {
			if (hash === undefined) throw new Error('This method need a param Array or String');
			if (hash == '') this.fly(this.defaultHash);else {
				if (Array.isArray(hash)) {
					var destinyHash = '';
					hash.map(function (hash, index) {
						hash = hash.split('#').join('');
						if (index == 0) destinyHash += "#" + hash;else destinyHash += "&" + hash;
					});
					window.location.hash = destinyHash;
				} else {
					hash = hash.split('#').join('');
					window.location.hash = "#" + hash;
				}
			}
		}
	}, {
		key: "addElement",
		value: function addElement(_ref3) {
			var $element = _ref3.$element,
			    hash = _ref3.hash;

			this.elements.push({ $element: $element, hash: hash });
		}
	}, {
		key: "isHTMLElement",
		value: function isHTMLElement(obj) {
			try {
				//Using W3 DOM2 (works for FF, Opera and Chrome)
				return obj instanceof HTMLElement;
			} catch (e) {
				//Browsers not supporting W3 DOM2 don't have HTMLElement and
				//an exception is thrown and we end up here. Testing some
				//properties that all elements have (works on IE7)
				return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" && obj.nodeType === 1 && _typeof(obj.style) === "object" && _typeof(obj.ownerDocument) === "object";
			}
		}
	}, {
		key: "dataBinding",
		value: function dataBinding() {
			var _this4 = this;

			var $pegasus_fly = document.querySelectorAll('[pegasusfly]');
			$pegasus_fly.forEach(function ($linkElement) {
				var link = $linkElement.getAttribute('pegasusFly');
				$linkElement.addEventListener('click', function () {
					_this4.fly(link);
				});
			});
		}
	}]);

	return Pegasus;
}();
