'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Pegasus = function () {
	function Pegasus(_ref) {
		var defaultHash = _ref.defaultHash,
		    config = _ref.config;

		_classCallCheck(this, Pegasus);

		this.defaultHash = defaultHash;
		this.config = {
			router: config.router
		};
		if (this.config.router) this.$element_error404 = config.template404;
	}

	_createClass(Pegasus, [{
		key: 'verifyDefaultHash',
		value: function verifyDefaultHash() {
			var _this = this;

			var thisObj = this;
			return new Promise(function (resolve, reject) {
				if (window.location.hash == '') {
					thisObj.fly(_this.defaultHash);
					resolve(false);
				} else {
					resolve(true);
				}
			});
		}
	}, {
		key: 'saddle',
		value: function saddle() {
			var _this2 = this;

			var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

			this.elements = elements;
			this.verifyDefaultHash().then(function (hasHash) {
				_this2.changeUrl();
			});
			window.onpopstate = function () {
				return _this2.changeUrl();
			};
		}
	}, {
		key: 'changeUrl',
		value: function changeUrl() {
			var currentHash = undefined;
			if (window.location.hash == null) currentHash = undefined;else currentHash = window.location.hash;
			this.dieOrlive(currentHash);
		}
	}, {
		key: 'dieOrlive',
		value: function dieOrlive(currentHash) {
			var page = this.elements.find(function (element) {
				return element.hash === window.location.hash;
			});
			if (page == undefined && this.config.router) {
				this.elements.map(function (element) {
					return element.$element.style['display'] = 'none';
				});
				this.error404();
			} else {
				if (this.config.router) this.$element_error404.style['display'] = 'none';
				this.elements.map(function (element, index) {
					if (currentHash !== undefined) {
						if (element.hash == currentHash) {
							element.$element.style['display'] = 'block';

							if (element.callback == null) {
								element.callback = function () {};
							}
							element.callback();
						} else {
							element.$element.style['display'] = 'none';
						}
					} else {
						element.$element.style['display'] = 'none';
					}
				});
			}
		}
	}, {
		key: 'error404',
		value: function error404() {
			this.$element_error404.style['display'] = 'block';
		}
	}, {
		key: 'fly',
		value: function fly(hash) {
			hash = hash.split('#').join('');
			return window.location.hash = hash;
		}
	}, {
		key: 'addElement',
		value: function addElement(_ref2) {
			var $element = _ref2.$element,
			    hash = _ref2.hash;

			this.elements.push({ $element: $element, hash: hash });
		}
	}]);

	return Pegasus;
}();